name: Deploy
on:
  release:
    types: [created]

defaults:
  run:
    shell: bash

permissions:
  contents: write

env:
  PRODUCT_BASENAME: picodiff

jobs:
  release:
    name: Deploy Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          # - aarch64-unknown-linux-gnu
          # - x86_64-unknown-linux-musl
          # - aarch64-unknown-linux-musl
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            tag: linux-x86_64-gnu
          # - target: aarch64-unknown-linux-gnu
          #   os: ubuntu-latest
          #   tag: linux-aarch64-gnu
          # - target: x86_64-unknown-linux-musl
          #   os: ubuntu-24.04
          #   tag: linux-x86_64-musl
          # - target: aarch64-unknown-linux-musl
          #   os: ubuntu-24.04
          #   tag: linux-aarch64-musl
          - target: aarch64-apple-darwin
            os: macos-latest
            tag: osx-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            tag: windows-x86_64-msvc
    steps:
    - uses: actions/checkout@v4
    - name: Install fltk-rs requirements on x64 Linux
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpango1.0-dev libgl1-mesa-dev libglu1-mesa-dev
    # - name: Install fltk-rs requirements on aarch64 Linux
    #   if: matrix.target == 'aarch64-unknown-linux-gnu'
    #   run: |
    #     sudo dpkg --add-architecture arm64
    #     sudo apt-get update
    #     sudo apt-get install -y --no-install-recommends libx11-dev:arm64 libxext-dev:arm64 libxft-dev:arm64 libxinerama-dev:arm64 libxcursor-dev:arm64 libxrender-dev:arm64 libxfixes-dev:arm64 libgl1-mesa-dev:arm64 libglu1-mesa-dev:arm64 libasound2-dev:arm64 libpango1.0-dev:arm64
    - name: Install Rust
      run: bash .github/workflows/scripts/install-rust.sh stable ${{ matrix.target }}
    - name: Build asset
      run: bash .github/workflows/scripts/make-release-asset.sh ${{ matrix.os }} ${{ matrix.target }} ${{ matrix.tag }} $PRODUCT_BASENAME
    - name: Update release with new asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release upload $APP_TAG $APP_ASSET

#  publish:
#    name: Publish to crates.io
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - name: Install Rust (rustup)
#        run: rustup update stable --no-self-update && rustup default stable
#      - name: Publish
#        env:
#          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
#        run: cargo publish --no-verify
